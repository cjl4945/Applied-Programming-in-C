# Source Files
SOURCE1 = hw8c.c
SOURCE2 = hw8_opt1.c
SOURCE3 = hw8_opt2.cpp
SOURCE4 = hw8_opt2.cpp

# Program Files
HW8C = hw8c
OPT1 = hw8c_opt1 
OPT2 = hw8c_opt2
OPT3 = hw8c_opt3

# Output File
OUT  = out.txt

# C Things
# --------
# CC: gcc
# CFLAGS: warnings all, c99, O1 optimization, pedantic?, debugging
# LFLAGS: math library
CC     = gcc 
CFLAGS = -Wall -std=c99 -pedantic -g 
MOVECLOSE  = -DMOVE_IO_CLOSE
MACRO  = -DEN_TIME 




# Dont print out each execution line
.SILENT:

#############################################################################
all: $(HW8C) $(OPT1) $(OPT2) $(OPT3)


# build for hw8c.c and all variations
$(HW8C): $(SOURCE1) 
	echo "Building $@.c $@ all variations"
	$(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O0 $(SOURCE1) -o $(HW8C)_0
	$(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O1 $(SOURCE1) -o $(HW8C)
	$(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O2 $(SOURCE1) -o $(HW8C)_2
	$(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O3 $(SOURCE1) -o $(HW8C)_3
	$(CC) $(CFLAGS) $(MOVECLOSE)  -O1 $(SOURCE1) -o $(HW8C)_mem
	

# build for hw8c_opt1.c and all variations
$(OPT1): $(SOURCE2)
        echo "Building $@.c $@ all variations"
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O0 $(SOURCE2) -o $(OPT1)_0
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O1 $(SOURCE2) -o $(OPT1)
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O2 $(SOURCE2) -o $(OPT1)_2
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O3 $(SOURCE2) -o $(OPT1)_3
        $(CC) $(CFLAGS) $(MOVECLOSE)  -O1 $(SOURCE2) -o $(OPT1)_mem


# build for hw8c_opt2.c	and all	variations
$(OPT2): $(SOURCE3)
        echo "Building $@.c $@ all variations"
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O0 $(SOURCE3) -o $(OPT2)_0
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O1 $(SOURCE3) -o $(OPT2)
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O2 $(SOURCE3) -o $(OPT2)_2
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O3 $(SOURCE3) -o $(OPT2)_3
        $(CC) $(CFLAGS) $(MOVECLOSE)  -O1 $(SOURCE3) -o $(OPT2)_mem

# build for hw8c_opt2.c and all variations
$(OPT3): $(SOURCE4)
        echo "Building $@.c $@ all variations"
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O0 $(SOURCE4) -o $(OPT3)_0
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O1 $(SOURCE4) -o $(OPT3)
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O2 $(SOURCE4) -o $(OPT3)_2
        $(CC) $(CFLAGS) $(MOVECLOSE) $(MACRO) -O3 $(SOURCE4) -o $(OPT3)_3
        $(CC) $(CFLAGS) $(MOVECLOSE)  -O1 $(SOURCE4) -o $(OPT3)_mem
.PHONY:test
test: $(PROG1) $(PROG2) $(PROG3) $(PROG4) $(PROG5) $(PROG6) $(PROG7) $(PROG8)
	@echo "Testing $(PROG1) without MOVE_IO_CLOSE macro"
	@echo "$(PROG1):" > $(OUT)
	@./$(PROG1) data.txt &>> $(OUT)
	@echo " " >> $(OUT)
	@echo "Testing $(PROG2) without MOVE_IO_CLOSE macro"
	@echo "$(PROG2):" >> $(OUT)
	@./$(PROG2) data.txt &>> $(OUT)
	@echo " " >> $(OUT)
	@echo "Testing $(PROG5) with MOVE_IO_CLOSE macro"
	@echo "$(PROG5):" >> $(OUT)
	@./$(PROG5) data.txt &>> $(OUT)
	@echo " " >> $(OUT)
	@echo "Testing $(PROG6) with MOVE_IO_CLOSE macro"
	@echo "$(PROG6):" >> $(OUT)
	@./$(PROG6) data.txt &>> $(OUT)
	@echo " " >> $(OUT)
	@echo "Testing $(PROG3) without MOVE_IO_CLOSE macro"
	@echo "$(PROG3):" >> $(OUT)
	@./$(PROG3) data.txt &>> $(OUT)
	@echo " " >> $(OUT)
	@echo "Testing $(PROG4) without MOVE_IO_CLOSE macro"
	@echo "$(PROG4):" >> $(OUT)
	@./$(PROG4) data.txt &>> $(OUT)
	@echo " " >> $(OUT)
	@echo "Testing $(PROG7) with MOVE_IO_CLOSE macro"
	@echo "$(PROG7):" >> $(OUT)
	@./$(PROG7) data.txt &>> $(OUT)
	@echo " " >> $(OUT)
	@echo "Testing $(PROG8) with MOVE_IO_CLOSE macro"
	@echo "$(PROG8):" >> $(OUT)
	@./$(PROG8) data.txt &>> $(OUT)
	@echo " " >> $(OUT)


.PHONY:mem
mem:
	
.PHONY:help
help:
	@echo all: builds $(SOURCE1), $(SOURCE2), $(SOURCE3), and $(SOURCE4) and all of their variations .
	@echo test: runs the tests for $(SOURCE1), $(SOURCE2), $(SOURCE3), and $(SOURCE4) and thier variations . 
	@echo       and writes them to $(OUT).
	@echo clean: removes temporary and immediate files.


.PHONY:clean
clean:
	-rm -f $(HW8C)
	-rm -f $(HW8C)_0
	-rm -f $(HW8C)_2
	-rm -f $(HW8C)_3
	-rm -f $(HW8C)_mem
	-rm -f $(OPT1)
	-rm -f $(OPT1)_0
	-rm -f $(OPT1)_2
	-rm -f $(OPT1)_3
	-rm -f $(OPT1)_mem
	-rm -f $(OPT2)
	-rm -f $(OPT2)_0
	-rm -f $(OPT2)_2
	-rm -f $(OPT2)_3
	-rm -f $(OPT2)_mem
	-rm -f $(OPT3)
	-rm -f $(OPT3)_0
	-rm -f $(OPT3)_2
	-rm -f $(OPT3)_3
	-rm -f $(OPT3)_mem
	-rm *.o
